from fft import *
import statistics
import copy

#print(testFrequencies

starryNight=[660.3515625, 660.3515625, 660.3515625, 660.3515625, 660.3515625, 129.19921875, 660.3515625, 258.3984375, 588.57421875, 660.3515625, 588.57421875, 588.57421875, 660.3515625, 660.3515625, 387.59765625, 660.3515625, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 330.17578125, 330.17578125, 488.0859375, 516.796875, 516.796875, 516.796875, 157.91015625, 488.0859375, 488.0859375, 488.0859375, 660.3515625, 258.3984375, 258.3984375, 258.3984375, 258.3984375, 258.3984375, 660.3515625, 645.99609375, 660.3515625, 588.57421875, 588.57421875, 588.57421875, 588.57421875, 387.59765625, 588.57421875, 14.35546875, 157.91015625, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 488.0859375, 488.0859375, 488.0859375, 157.91015625, 157.91015625, 516.796875, 531.15234375, 488.0859375, 660.3515625, 660.3515625, 660.3515625, 258.3984375, 258.3984375, 258.3984375, 531.15234375, 488.0859375, 588.57421875, 588.57421875, 387.59765625, 387.59765625, 588.57421875, 588.57421875, 588.57421875, 14.35546875, 157.91015625, 157.91015625, 818.26171875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 229.6875, 516.796875, 488.0859375, 488.0859375, 157.91015625, 516.796875, 157.91015625, 904.39453125, 129.19921875, 660.3515625, 660.3515625, 660.3515625, 660.3515625, 258.3984375, 660.3515625, 588.57421875, 588.57421875, 588.57421875, 588.57421875, 387.59765625, 387.59765625, 387.59765625, 588.57421875, 516.796875, 516.796875, 516.796875, 516.796875, 330.17578125, 516.796875, 516.796875, 516.796875, 215.33203125, 244.04296875, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 588.57421875, 588.57421875, 488.0859375, 488.0859375, 861.328125, 588.57421875, 488.0859375, 588.57421875, 516.796875, 200.9765625, 516.796875, 516.796875, 516.796875, 516.796875, 488.0859375, 488.0859375, 157.91015625, 172.265625, 157.91015625, 172.265625, 157.91015625, 330.17578125, 330.17578125, 445.01953125, 445.01953125, 445.01953125, 875.68359375, 875.68359375, 445.01953125, 445.01953125, 875.68359375, 861.328125, 861.328125, 244.04296875, 445.01953125, 588.57421875, 588.57421875, 861.328125, 488.0859375, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 488.0859375, 172.265625, 157.91015625, 172.265625, 488.0859375, 488.0859375, 330.17578125, 488.0859375, 875.68359375, 488.0859375, 445.01953125, 445.01953125, 445.01953125, 445.01953125, 445.01953125, 861.328125, 588.57421875, 588.57421875, 861.328125, 588.57421875, 588.57421875, 588.57421875, 588.57421875, 516.796875, 516.796875, 516.796875, 588.57421875, 531.15234375, 516.796875, 516.796875, 516.796875, 215.33203125, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 531.15234375, 445.01953125, 602.9296875, 488.0859375, 488.0859375, 488.0859375, 445.01953125, 445.01953125, 875.68359375, 861.328125, 861.328125, 588.57421875, 588.57421875, 588.57421875, 861.328125, 430.6640625, 588.57421875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 516.796875, 157.91015625, 157.91015625, 157.91015625, 488.0859375, 488.0859375, 488.0859375, 488.0859375, 445.01953125, 588.57421875, 445.01953125, 488.0859375, 488.0859375, 875.68359375, 445.01953125, 445.01953125]

testFrequencies=starryNight

beatLength=[1 for i in range(len(testFrequencies))]


def beatDetection3(frequencies):
	sampWindow=256
	for i in range(len(frequencies)-1):
		if almostEqual(frequencies[i],frequencies[i+1]):
			if statistics.mean(window[i*sampWindow:(i+1)*sampWindow])>=statistics.mean(window[(i+1)*sampWindow:(i+2)*sampWindow]):
				beatLength[i]+=1
				#beatLength[i+1]+=1
	return beatLength

beatLength=beatDetection3(testFrequencies)
print("beatLength=",beatLength)

def getPace(testFrequencies):
	beatCopy=copy.copy(beatLength)
	pace=1
	# while beatCopy[1]!=1:
	# 	pace+=1
	# 	beatCopy=beatCopy[1:]


	for i in range(len(testFrequencies)-1):
		if almostEqual(testFrequencies[i],testFrequencies[i+1]):
			pace+=1
		else:
			break

	return pace

pace=getPace(testFrequencies)

print(pace)

def setPace(testFrequencies,pace):
	return testFrequencies[::pace]

testFrequencies=setPace(testFrequencies,pace)

print(testFrequencies)



